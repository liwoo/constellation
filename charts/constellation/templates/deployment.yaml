apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "constellation.fullname" . }}
  labels:
    {{- include "constellation.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "constellation.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "constellation.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if not .Values.serviceAccount.automountServiceAccountToken }}
      volumes:
        - name: token-volume
          secret:
            secretName: default-token
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: DATABASE_HOST
              value: "pg-postgresql-pg-postgresql.data.svc.cluster.local"
            - name: DATABASE_PORT
              value: "5432"
            - name: DATABASE_NAME
              value: {{ .Values.database.name | quote }}
            - name: DATABASE_SSL
              value: {{ .Values.database.ssl | quote }}
            - name: DATABASE_USERNAME
              value: "postgres"
            - name: DATABASE_PASSWORD
              value: "postgrespw"
            - name: DATABASE_POOL_MIN
              value: {{ .Values.database.poolMin | quote }}
            - name: DATABASE_POOL_MAX
              value: {{ .Values.database.poolMax | quote }}
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.config.secretKeyBaseSecretName }}
                  key: {{ .Values.config.secretKeyBaseSecretKey }}
            - name: GEMINI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.config.geminiApiKeySecretName }}
                  key: {{ .Values.config.geminiApiKeySecretKey }}
            - name: PHX_HOST
              value: "games.kwathu.ai"
            - name: PORT
              value: {{ .Values.service.targetPort | quote }}
            - name: PHX_SERVER
              value: "true"
          {{- if not .Values.serviceAccount.automountServiceAccountToken }}
          volumeMounts:
            - name: token-volume
              mountPath: /var/run/secrets/kubernetes.io/serviceaccount
              readOnly: true
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health # Assuming you have a health check endpoint
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health # Assuming you have a health check endpoint
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
